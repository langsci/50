%!PS-Adobe-2.0 EPSF-2.0
%%Title: schema_robots.eps
%%Creator: fig2dev Version 3.2 Patchlevel 1
%%CreationDate: Wed Dec  8 13:42:26 1999
%%For: paul@arti12 (Paul Vogt)
%%Orientation: Portrait
%%BoundingBox: 0 0 711 443
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-17.0 500.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% crosshatch45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<828282824444444428282828101010102828282844444444
	828282820101010182828282444444442828282810101010
	282828284444444482828282010101018282828244444444
	282828281010101028282828444444448282828201010101
	828282824444444428282828101010102828282844444444
	8282828201010101>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P6 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 9325 m -1000 -1000 l 13121 -1000 l 13121 9325 l cp clip
 0.06000 0.06000 sc
% Polyline
15.000 slw
n 4500 3300 m 8925 3300 l 8925 6150 l 4500 6150 l cp gs col7 0.85 shd ef gr gs col0 s gr 
% Polyline
n 10125 4575 m 10122 4576 l 10115 4579 l 10103 4584 l 10088 4591 l 10070 4599 l
 10051 4607 l 10033 4616 l 10016 4624 l 10001 4633 l 9988 4641 l
 9975 4650 l 9964 4658 l 9953 4668 l 9941 4677 l 9928 4688 l
 9914 4699 l 9900 4710 l 9886 4721 l 9872 4733 l 9859 4745 l
 9848 4756 l 9838 4767 l 9831 4778 l 9827 4789 l 9825 4800 l
 9827 4811 l 9831 4822 l 9838 4833 l 9848 4844 l 9859 4855 l
 9872 4867 l 9886 4879 l 9900 4890 l 9914 4901 l 9928 4912 l
 9941 4923 l 9953 4932 l 9964 4942 l 9975 4950 l 9988 4959 l
 10001 4967 l 10016 4976 l 10033 4984 l 10051 4993 l 10070 5001 l
 10088 5009 l 10103 5016 l 10115 5021 l 10122 5024 l 10125 5025 l gs col0 s gr 
% Polyline
n 9900 4035 m 9898 4038 l 9893 4044 l 9886 4054 l 9876 4067 l 9864 4083 l
 9853 4100 l 9841 4116 l 9831 4132 l 9822 4147 l 9814 4161 l
 9808 4175 l 9803 4188 l 9798 4201 l 9792 4216 l 9786 4231 l
 9780 4248 l 9773 4264 l 9767 4281 l 9760 4298 l 9755 4315 l
 9751 4331 l 9748 4345 l 9747 4358 l 9749 4370 l 9753 4380 l
 9760 4389 l 9769 4396 l 9781 4402 l 9795 4407 l 9810 4411 l
 9827 4414 l 9845 4418 l 9863 4420 l 9881 4423 l 9898 4426 l
 9915 4428 l 9930 4431 l 9944 4433 l 9958 4435 l 9973 4436 l
 9989 4437 l 10007 4437 l 10025 4436 l 10045 4434 l 10066 4432 l
 10085 4430 l 10102 4428 l 10114 4426 l 10121 4425 l 10124 4425 l
 10125 4425 l gs col0 s gr 
% Polyline
n 10125 5175 m 10124 5175 l 10121 5175 l 10114 5174 l 10102 5172 l 10085 5170 l
 10066 5168 l 10045 5166 l 10025 5164 l 10007 5163 l 9989 5163 l
 9973 5164 l 9958 5165 l 9944 5167 l 9930 5169 l 9915 5172 l
 9898 5174 l 9881 5177 l 9863 5180 l 9845 5182 l 9827 5186 l
 9810 5189 l 9795 5193 l 9781 5198 l 9769 5204 l 9760 5211 l
 9753 5220 l 9749 5230 l 9747 5242 l 9748 5255 l 9751 5269 l
 9755 5285 l 9760 5302 l 9767 5319 l 9773 5336 l 9780 5352 l
 9786 5369 l 9792 5384 l 9798 5399 l 9803 5412 l 9808 5425 l
 9814 5439 l 9822 5453 l 9831 5468 l 9841 5484 l 9853 5500 l
 9864 5517 l 9876 5533 l 9886 5546 l 9893 5556 l 9898 5562 l
 9900 5565 l gs col0 s gr 
% Ellipse
n 10275 4800 150 150 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 675.00 310.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
 [60] 0 sd
n 3450 3300 m 4200 3300 l 4200 6150 l 3450 6150 l cp gs col0 s gr  [] 0 sd
/Times-Bold ff 180.00 scf sf
1500 4725 m
gs 1 -1 sc (BACK) col0 sh gr
/Times-Bold ff 180.00 scf sf
11475 4725 m
gs 1 -1 sc (FRONT) col0 sh gr
% Ellipse
n 675 1575 150 150 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 35.00 95.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
7.500 slw
 [15 45] 45 sd
n 300 975 m 1875 975 l 1875 2625 l 300 2625 l cp gs col0 s gr  [] 0 sd
% Polyline
15.000 slw
n 825 1950 m 822 1951 l 815 1954 l 803 1959 l 788 1966 l 770 1974 l
 751 1982 l 733 1991 l 716 1999 l 701 2008 l 688 2016 l
 675 2025 l 664 2033 l 653 2043 l 641 2052 l 628 2063 l
 614 2074 l 600 2085 l 586 2096 l 572 2108 l 559 2120 l
 548 2131 l 538 2142 l 531 2153 l 527 2164 l 525 2175 l
 527 2186 l 531 2197 l 538 2208 l 548 2219 l 559 2230 l
 572 2242 l 586 2254 l 600 2265 l 614 2276 l 628 2287 l
 641 2298 l 653 2307 l 664 2317 l 675 2325 l 688 2334 l
 701 2342 l 716 2351 l 733 2359 l 751 2368 l 770 2376 l
 788 2384 l 803 2391 l 815 2396 l 822 2399 l 825 2400 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
525 1275 m
gs 1 -1 sc (Infrared Module:) col0 sh gr
/Times-Roman ff 180.00 scf sf
1050 2250 m
gs 1 -1 sc (IR sensor) col0 sh gr
/Times-Roman ff 180.00 scf sf
1050 1650 m
gs 1 -1 sc (IR emitter) col0 sh gr
% Ellipse
n 2850 4725 150 150 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 180.00 305.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 6600 2700 150 150 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 430.00 170.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 6600 6600 150 150 0 360 DrawEllipse gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 430.00 430.00] PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
n 6900 6300 m 8100 6300 l 8100 6975 l 6900 6975 l cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 6825 2475 m 8025 2475 l 8025 3150 l 6825 3150 l cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 6300 2175 m 7650 2175 l 7650 2475 l 6300 2475 l cp gs col0 s gr 
% Polyline
n 6300 6975 m 7800 6975 l 7800 7275 l 6300 7275 l cp gs col0 s gr 
% Polyline
7.500 slw
n 8475 2175 m 9075 2175 l 9075 2400 l 8475 2400 l cp gs col7 0.25 shd ef gr gs col0 s gr 
/Times-Roman ff 180.00 scf sf
1425 7125 m
gs 1 -1 sc (Bumper) col0 sh gr
/Times-Roman ff 180.00 scf sf
7200 6675 m
gs 1 -1 sc (Motor) col0 sh gr
/Times-Bold ff 180.00 scf sf
6375 1350 m
gs 1 -1 sc (LEFT) col0 sh gr
% Polyline
15.000 slw
n 3375 2325 m 4200 2325 l 4200 3000 l 3375 3000 l cp gs col0 s gr 
/Times-Bold ff 180.00 scf sf
6300 8325 m
gs 1 -1 sc (RIGHT) col0 sh gr
/Times-Roman ff 180.00 scf sf
6675 7200 m
gs 1 -1 sc (Gearings) col0 sh gr
/Times-Roman ff 180.00 scf sf
7125 2850 m
gs 1 -1 sc (Motor) col0 sh gr
/Times-Roman ff 180.00 scf sf
3600 2700 m
gs 1 -1 sc (Radio) col0 sh gr
/Times-Roman ff 180.00 scf sf
6675 2400 m
gs 1 -1 sc (Gearings) col0 sh gr
/Times-Roman ff 180.00 scf sf
8700 2625 m
gs 1 -1 sc (Motor Controller) col0 sh gr
/Times-Roman ff 180.00 scf sf
11250 3375 m
gs 1 -1 sc (Bumper) col0 sh gr
/Times-Roman ff 180.00 scf sf
3600 4500 m
gs 1 -1 sc (Battery) col0 sh gr
% Polyline
45.000 slw
n 2250 2700 m 2550 2700 l gs col0 s gr 
% Polyline
n 2250 6750 m 2550 6750 l gs col0 s gr 
% Polyline
n 10800 6750 m 11100 6750 l gs col0 s gr 
% Polyline
n 10800 2700 m 11100 2700 l gs col0 s gr 
% Polyline
15.000 slw
n 2550 2175 m 10800 2175 l 10800 7275 l 2550 7275 l cp gs col0 s gr 
% Polyline
n 4350 2325 m 5850 2325 l 5850 3000 l 4350 3000 l cp gs col0 s gr 
% Polyline
45.000 slw
n 2250 2025 m 2250 7425 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
4725 2700 m
gs 1 -1 sc (Display) col0 sh gr
/Times-Roman ff 180.00 scf sf
6450 4650 m
gs 1 -1 sc (SMBII) col0 sh gr
% Polyline
n 10125 1350 m 11100 1950 l 11100 7500 l 10125 8100 l gs col0 s gr 
/Times-Roman ff 180.00 scf sf
4425 2025 m
gs 1 -1 sc (Wheel) col0 sh gr
/Times-Roman ff 180.00 scf sf
4425 7725 m
gs 1 -1 sc (Wheel) col0 sh gr
% Polyline
n 5205 1575 m 5100 1575 5100 2070 105 arcto 4 {pop} repeat
  5100 2175 8145 2175 105 arcto 4 {pop} repeat
  8250 2175 8250 1680 105 arcto 4 {pop} repeat
  8250 1575 5205 1575 105 arcto 4 {pop} repeat
 cp gs col7 0.65 shd ef gr gs col0 s gr 
% Polyline
n 5205 7275 m 5100 7275 5100 7770 105 arcto 4 {pop} repeat
  5100 7875 8145 7875 105 arcto 4 {pop} repeat
  8250 7875 8250 7380 105 arcto 4 {pop} repeat
  8250 7275 5205 7275 105 arcto 4 {pop} repeat
 cp gs col7 0.65 shd ef gr gs col0 s gr 
$F2psEnd
rs
end
